extern "C" {
#include <AES.h>
#include <uECC.h>
};
#include <ESP8266WiFi.h>

AES aes ;
char ssid[] = "";           // SSID of your home WiFi
char pass[] = "";            // password of your home WiFi

unsigned long askTimer = 0;
unsigned long long int myIv = 36753562; // CBC initialization vector; real iv = iv x2 ex: 01234567 = 0123456701234567

 WiFiClient client;
 IPAddress server(192, 168, 43, 80);       // the fix IP address of the server

void setup() {
  Serial.begin(115200);               // only for debug
  WiFi.begin(ssid, pass);             // connects to the WiFi router
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
}
void loop () 
{
  byte iv [N_BLOCK] ;
  int bits = 128;
  byte decrypted [100]; // decrypted plaintext
  byte private1[20], private2[20], public1[40], public2[40], secret1[20] ; // initialise the variables and ensure that the key generated by server and client are the same

  // Generate the ECC (Elliptic Curve Cryptography) key
  const struct uECC_Curve_t * curve = uECC_secp160r1();
  uECC_make_key(public1, private1, curve); 
  uECC_make_key(public2, private2, curve);
  uECC_shared_secret(public2, private1, secret1, curve);

  // establish the connection between server and client
  
  client.connect(server, 80);   // Connection to the server
  String answer = client.readStringUntil('\r');   // receives the answer from the sever
  client.flush();

// decrypt the message with help of AES
  byte enc_byte[answer.length() + 1]; // convert the message to byte form
  aes.set_IV(myIv);
  aes.get_IV(iv);
  aes.do_aes_decrypt(enc_byte, aes.get_size(), decrypted, secret1, bits, iv); 
}
